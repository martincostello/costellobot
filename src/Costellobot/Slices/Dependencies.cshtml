@inherits RazorSliceHttpResult<IReadOnlyDictionary<DependencyEcosystem, IReadOnlyList<TrustedDependency>>>
@implements IUsesLayout<_Layout, LayoutModel>

@{
    var tokens = Antiforgery.GetTokens(HttpContext!);
}

<div id="dependencies-content">
    <h1>
        <span class="fa-solid fa-cube" aria-hidden="true"></span>
        @(LayoutModel.Title)
    </h1>
    <hr />
    @if (!Model.SelectMany((p) => p.Value).Any())
    {
        <div class="card">
            <div class="card-body dependencies-none">
                There are no implicitly trusted dependencies configured.
            </div>
        </div>
    }
    else
    {
        <div class="row justify-content-center">
            <table class="table w-auto">
                <thead class="table-light">
                    <tr>
                        <th scope="col" colspan="2">ID</th>
                        <th scope="col">Version</th>
                        <th scope="col">Timestamp</th>
                        <th scope="col">Distrust</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach ((var ecosystem, var dependencies) in Model)
                    {
                        foreach (var dependency in dependencies.OrderBy((p) => p.Id).ThenByDescending((p) => p.Version))
                        {
                            (var name, var url, var icon) = GetMetadata(ecosystem, dependency.Id, dependency.Version);

                            <tr class="trusted-dependency">
                                <td>
                                    <span class="dependency-ecosystem @(icon)" title="@(name)"></span>
                                </td>
                                <td>
                                    <code class="dependency-id">
                                        @if (url is { Length: > 0 })
                                        {
                                            <a href="@(url)" target="_blank" rel="noopener">@(dependency.Id)</a>
                                        }
                                        else
                                        {
                                            @(dependency.Id)
                                        }
                                    </code>
                                </td>
                                <td>
                                    <code class="dependency-version">@(dependency.Version)</code>
                                </td>
                                <td>
                                    <div class="dependency-timestamp" title="@(dependency.TrustedAt?.ToString("u", CultureInfo.InvariantCulture))">
                                        @(dependency.TrustedAt?.Humanize())
                                    </div>
                                </td>
                                <td>
                                    <form action="dependencies/distrust" method="post">
                                        <input name="@(tokens.FormFieldName)" type="hidden" value="@(tokens.RequestToken)">
                                        <input type="hidden" name="ecosystem" value="@(ecosystem)">
                                        <input type="hidden" name="id" value="@(dependency.Id)">
                                        <input type="hidden" name="version" value="@(dependency.Version)">
                                        <div class="d-grid">
                                            <button class="btn btn-danger btn-sm distrust-dependency" title="Distrust @(dependency.Id) @(dependency.Version)" type="submit">
                                                <span class="fa-solid fa-ban" aria-hidden="true"></span>
                                            </button>
                                        </div>
                                    </form>
                                </td>
                            </tr>
                        }
                    }
                    <tr>
                        <td colspan="4">
                        <td class="text-end">
                            <form action="dependencies/distrust-all" method="post">
                                <input name="@(tokens.FormFieldName)" type="hidden" value="@(tokens.RequestToken)">
                                <button class="btn btn-danger btn-sm" id="distrust-all" title="Distrust all dependencies" type="submit">
                                    Distrust all
                                    <span class="fa-stack" aria-hidden="true">
                                        <span class="fa-solid fa-database fa-stack-1x text-dark"></span>
                                        <span class="fa-solid fa-ban fa-stack-2x text-white"></span>
                                    </span>
                                </button>
                            </form>                            
                        </td>
                    </tr>
                </tbody>
                <caption>
                    Implicitly trusted dependencies.
                </caption>
            </table>
        </div>
    }
</div>

@functions {
    public LayoutModel LayoutModel { get; } = new("Dependencies");

    private static (string Name, string Url, string CssClasses) GetMetadata(DependencyEcosystem ecosystem, string id, string version)
    {
        return ecosystem switch
        {
            DependencyEcosystem.GitHubActions => ("GitHub Actions", GitHubUrl(id), "fa-brands fa-square-github text-dark"),
            DependencyEcosystem.Npm => ("npm", NpmUrl(id), "fa-brands fa-npm text-danger"),
            DependencyEcosystem.NuGet => ("NuGet", NuGetUrl(id), "fa-solid fa-cube text-dotnet"),
            _ => (ecosystem.ToString(), string.Empty, "fa-solid fa-cube")
        };

        static string GitHubUrl(string repository)
            => BuildUrl("github.com", repository);

        static string NpmUrl(string id)
            => BuildUrl("www.npmjs.com", $"/package/{id}");

        static string NuGetUrl(string id)
            => BuildUrl("www.nuget.org", $"/packages/{id}");

        static string BuildUrl(string hostname, string path)
        {
            return new UriBuilder()
            {
                Host = hostname,
                Path = path,
                Scheme = Uri.UriSchemeHttps,
            }.ToString();
        }
    }
}
