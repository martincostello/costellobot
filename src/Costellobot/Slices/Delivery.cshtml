@inherits RazorSliceHttpResult<DeliveryModel>
@implements IUsesLayout<_Layout, LayoutModel>

<div id="delivery-content" data-delivery-id="@(Model.Id)" data-delivery-guid="@(Model.DeliveryId)">
  <h1>
    <span class="fa-solid fa-box-open" aria-hidden="true"></span>
    @(LayoutModel.Title)
  </h1>
  <table class="table table-sm">
    <caption class="caption-top">
      Properties of the webhook delivery.
    </caption>
    <thead>
      <tr>
        <th scope="col">Property</th>
        <th scope="col">Value</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Event</td>
        <td>
          <code id="event">@(Model.Event)</code>
        </td>
      </tr>
      <tr>
        <td>Action</td>
        <td>
          <code id="action">@(Model.Action)</code>
        </td>
      </tr>
      <tr>
        <td>Repository ID</td>
        <td>
          <code id="repository-id">@(Model.RepositoryId)</code>
        </td>
      </tr>
      <tr>
        <td>URL</td>
        <td>
          <code id="url">@(Model.RequestUrl)</code>
        </td>
      </tr>
    </tbody>
  </table>
  <hr/>
  <ul class="nav nav-tabs" id="tabs" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="request-tab" data-bs-toggle="tab" data-bs-target="#request" type="button" role="tab" aria-controls="request" aria-selected="true">
        Request
        <span class="text-muted">
          <span class="fa-solid fa-clock" aria-hidden="true"></span>
          <span class="text-muted" title="@(Model.DeliveredAt.Humanize())">
            @@@(Model.DeliveredAt.ToString("u", CultureInfo.InvariantCulture))
          </span>
        </span>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="response-tab" data-bs-toggle="tab" data-bs-target="#response" type="button" role="tab" aria-controls="response" aria-selected="false">
        Response
        @{
            string @class = Model.ResponseStatusCode switch
            {
              int value when value >= 200 && value < 300 => "bg-success",
              _ => "bg-danger",
            };
        }
        <span class="badge bg-secondary @(@class)" title="@(Model.ResponseStatus)">
          @(Model.ResponseStatusCode.ToString(CultureInfo.InvariantCulture))
        </span>
        @if (Model.Redelivery)
        {
          <span class="badge rounded-pill bg-primary">Redelivery</span>
        }
        <span class="text-muted">
          <span class="fa-solid fa-stopwatch text-muted" aria-hidden="true"></span>
          in @(Model.Duration) seconds
        </span>
      </button>
    </li>
  </ul>
  <div class="tab-content" id="tab-content">
    <div class="tab-pane fade show active" id="request" role="tabpanel" aria-labelledby="request-tab">
      <h3>Headers</h3>
      <pre id="request-headers" class="hook-delivery-container">@foreach ((var key, var value) in Model.RequestHeaders){<strong>@(key):</strong> @(value)<br/>}</pre>
      <h3>Payload</h3>
      <div class="btn-toolbar mb-3" role="toolbar">
        <div class="btn-group me-2" role="group">
          <button id="copy-payload" class="btn btn-primary copy-button" data-clipboard-target="#request-payload" title="Copy the webhook payload to the clipboard">
            Copy to clipboard
            <span class="far fa-clipboard" aria-hidden="true"></span>
          </button>
        </div>
        <div class="btn-group" role="group">
          <form method="post">
            <input type="hidden" value="@(Model.Id)" id="id" name="id">
            <button id="redeliver-payload" class="btn btn-outline-danger" title="Redeliver the webhook payload" type="submit">
              Redeliver
              <span class="fa-solid fa-rocket" aria-hidden="true"></span>
            </button>
            @{
              var tokens = Antiforgery.GetTokens(HttpContext!);
            }
            <input name="@(tokens.FormFieldName)" type="hidden" value="@(tokens.RequestToken)" />
          </form>
        </div>
      </div>
      <pre id="request-payload" class="hook-delivery-container">@(Model.RequestPayload)</pre>
    </div>
    <div class="tab-pane fade" id="response" role="tabpanel" aria-labelledby="response-tab">
      @if (Model.ResponseHeaders.Count > 0)
      {
        <h3>Headers</h3>
        <pre class="hook-delivery-container">@foreach ((var key, var value) in Model.ResponseHeaders){<strong>@(key):</strong> @(value)<br/>}</pre>
      }
      @if (!string.IsNullOrWhiteSpace(Model.ResponseBody))
      {
        <h3>Body</h3>
        <pre class="hook-delivery-container">@(Model.ResponseBody)</pre>
      }
    </div>
  </div>
</div>

@functions {
    public LayoutModel LayoutModel => new(Model.DeliveryId);

    protected override Task ExecuteSectionAsync(string name)
    {
        if (name is "scripts")
        {
            <script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.11/clipboard.min.js" integrity="sha512-7O5pXpc0oCRrxk8RUfDYFgn0nO1t+jLuIOQdOMRp4APB7uZ4vSjspzp5y6YDtDs4VzUSTbWzBFZ/LKJhnyFOKw==" crossorigin="anonymous" defer></script>
        }

        return Task.CompletedTask;
    }
}
