// Copyright (c) Martin Costello, 2022. All rights reserved.
// Licensed under the Apache 2.0 license. See the LICENSE file in the project root for full license information.

using Octokit.GraphQL;
using Octokit.GraphQL.Model;
using PullRequestMergeMethod = Octokit.GraphQL.Model.PullRequestMergeMethod;

namespace MartinCostello.Costellobot.Handlers;

public sealed partial class PullRequestApprover(
    GitHubWebhookContext context,
    ILogger<PullRequestApprover> logger)
{
    public static PullRequestMergeMethod GetMergeMethod(Octokit.Repository repo)
        => GetMergeMethod((repo.AllowMergeCommit, repo.AllowSquashMerge, repo.AllowRebaseMerge));

    public static PullRequestMergeMethod GetMergeMethod(Octokit.Webhooks.Models.Repository repo)
        => GetMergeMethod((repo.AllowMergeCommit, repo.AllowSquashMerge, repo.AllowRebaseMerge));

    public async Task ApproveAndMergeAsync(IssueId pull, string nodeId, PullRequestMergeMethod mergeMethod)
    {
        var options = context.WebhookOptions;

        if (options.Approve)
        {
            await ApproveAsync(pull);
        }

        if (options.Automerge)
        {
            await EnableAutoMergeAsync(
                pull,
                nodeId,
                mergeMethod);
        }
    }

    private static PullRequestMergeMethod GetMergeMethod((bool? AllowMergeCommit, bool? AllowSquashMerge, bool? AllowRebaseMerge) repo)
    {
        if (repo.AllowMergeCommit == true)
        {
            return PullRequestMergeMethod.Merge;
        }
        else if (repo.AllowSquashMerge == true)
        {
            return PullRequestMergeMethod.Squash;
        }
        else if (repo.AllowRebaseMerge == true)
        {
            return PullRequestMergeMethod.Rebase;
        }
        else
        {
            return PullRequestMergeMethod.Merge;
        }
    }

    private async Task ApproveAsync(IssueId pull)
    {
        var body = new StringBuilder(context.WebhookOptions.ApproveComment);

        if (body.Length > 0)
        {
            body.Append('\n')
                .Append('\n')
                .Append("<!-- Generated by version ")
                .Append(GitMetadata.Version)
                .Append(" of Costellobot -->");
        }

        await context.InstallationClient.PullRequest.Review.Create(
            pull.Owner,
            pull.Name,
            pull.Number,
            new()
            {
                Body = body.ToString(),
                Event = Octokit.PullRequestReviewEvent.Approve,
            });

        Log.PullRequestApproved(logger, pull);
    }

    private async Task EnableAutoMergeAsync(
        IssueId pull,
        string nodeId,
        PullRequestMergeMethod mergeMethod)
    {
        var input = new EnablePullRequestAutoMergeInput()
        {
            MergeMethod = mergeMethod,
            PullRequestId = new(nodeId),
        };

        var mutation = new Mutation()
            .EnablePullRequestAutoMerge(input)
            .Select((p) => new { p.PullRequest.Number })
            .Compile();

        try
        {
            await context.GraphQLClient.Run(mutation);
            Log.AutoMergeEnabled(logger, pull);
        }
        catch (Octokit.GraphQL.Core.Deserializers.ResponseDeserializerException ex) when (ex.Message.Contains("Pull request Pull request is in clean status", StringComparison.OrdinalIgnoreCase))
        {
            try
            {
                // If auto-merge failed as the PR is ready to merge, then just merge it
                var response = await context.InstallationClient.PullRequest.Merge(pull.Owner, pull.Name, pull.Number, new()
                {
                    MergeMethod = Enum.Parse<Octokit.PullRequestMergeMethod>(mergeMethod.ToString()),
                });

                if (response.Merged)
                {
                    Log.PullRequestMerged(logger, pull);
                }
            }
            catch (Exception ex2)
            {
                Log.EnableAutoMergeFailed(logger, ex, pull, nodeId);
                Log.MergeFailed(logger, ex2, pull);
            }
        }
        catch (Exception ex)
        {
            Log.EnableAutoMergeFailed(logger, ex, pull, nodeId);
        }
    }

    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    private static partial class Log
    {
        [LoggerMessage(
           EventId = 1,
           Level = LogLevel.Information,
           Message = "Approved pull request {PullRequest}.")]
        public static partial void PullRequestApproved(
            ILogger logger,
            IssueId pullRequest);

        [LoggerMessage(
           EventId = 2,
           Level = LogLevel.Information,
           Message = "Enabled auto-merge for pull request {PullRequest}.")]
        public static partial void AutoMergeEnabled(
            ILogger logger,
            IssueId pullRequest);

        [LoggerMessage(
           EventId = 3,
           Level = LogLevel.Warning,
           Message = "Failed to enable auto-merge for pull request {PullRequest} with node ID {NodeId}.")]
        public static partial void EnableAutoMergeFailed(
            ILogger logger,
            Exception exception,
            IssueId pullRequest,
            string nodeId);

        [LoggerMessage(
           EventId = 4,
           Level = LogLevel.Information,
           Message = "Pull request {PullRequest} merged.")]
        public static partial void PullRequestMerged(
            ILogger logger,
            IssueId pullRequest);

        [LoggerMessage(
           EventId = 5,
           Level = LogLevel.Warning,
           Message = "Failed to merge pull request {PullRequest}.")]
        public static partial void MergeFailed(
            ILogger logger,
            Exception exception,
            IssueId pullRequest);
    }
}
